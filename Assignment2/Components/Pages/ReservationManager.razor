@page "/ReservationManager"
@using System
@using Assignment2.Data
<div class="d-flex justify-content-center">
    <h3>Reservation Finder</h3>
</div>
<label>Code:</label>
<input placeholder="Any" @bind="reservationCode" />
<label>Airline:</label>
<input placeholder="Any" @bind="reservationAirline" />
<label>Name:</label>
<input placeholder="Any" @bind="reservationName" />
<button class="btn-primary" @onclick="FindReservation">Find Reservations</button>
<br />
<div class="d-flex justify-content-center">
    <h3>Reservations</h3>
</div>
@foreach (var res in filteredReservs)
{
    <p @onclick="() => SelectReservation(res)"> @res.ReservationCode @res.ClientName @res.ClientCitizenship  @res.ReservedFlight.FlightNumber @res.ReservedFlight.Airline @res.ReservedFlight.FlightTime</p>
}
<br />
<div class="d-flex justify-content-center">
    <h3>Reserve</h3>
</div>
<div class="d-flex flex-column">
    <label>Reservation code:</label>
    <input placeholder="Reservation code" @bind="foundResCode" disabled/>
    <label>Flight code:</label>
    <input placeholder="Flight" @bind="foundResFlightCode" disabled/>
    <label>Airline:</label>
    <input placeholder="Airline" @bind="foundResAirline" disabled/>
    <label>Cost:</label>
    <input placeholder="Cost" @bind="foundResCost" disabled/>
    <label>Name:</label>
    <input placeholder="Name" @bind="foundResName"/>
    <label>Citizenship:</label>
    <input placeholder="Citizenship" @bind="foundResCitizenship"/>
    <label>Status:</label>
    <input placeholder="Status" @bind="foundResStatus"/>
</div>
<br />
<div class="d-flex justify-content-center">
    <button class="btn-primary" @onclick="UpdateReservation">Update</button>
</div>
<br />

@code {
    private string? reservationName, reservationAirline, reservationCode, foundResCode, foundResFlightCode, foundResAirline, foundResCost,
        foundResName, foundResCitizenship, foundResStatus;
    private List<Reservation> foundReservs = new List<Reservation>();
    private IEnumerable<Reservation> filteredReservs = new List<Reservation>();
    private Reservation? foundRes;
    private void FindReservation()
    {
        filteredReservs = FindFlightRes.reservations.Where(res => (!string.IsNullOrEmpty(reservationCode) ? string.Equals(res.ReservationCode, reservationCode.Trim(), StringComparison.OrdinalIgnoreCase) : true))
                                                       .Where(res => (!string.IsNullOrEmpty(reservationAirline) ? string.Equals(res.ReservedFlight.Airline, reservationAirline.Trim(), StringComparison.OrdinalIgnoreCase) : true))
                                                       .Where(res => (!string.IsNullOrEmpty(reservationName) ? string.Equals(res.ClientName, reservationName.Trim(), StringComparison.OrdinalIgnoreCase) : true));


    }
    private void SelectReservation(Reservation res)
    {
        foundRes = res;
        foundResCode = foundRes.ReservationCode;
        foundResFlightCode = foundRes.ReservedFlight.FlightNumber;
        foundResAirline = foundRes.ReservedFlight.Airline;
        foundResCost = foundRes.ReservedFlight.TicketCost.ToString();
        foundResName = foundRes.ClientName;
        foundResCitizenship = foundRes.ClientCitizenship;
        if (foundRes.ReservationStatus is true)
        {
            foundResStatus = "Active";
        }else{
            foundResStatus = "Inactive";
        }
    }
    private void UpdateReservation()
    {
        try
        {
            foundRes.UpdateClientName(foundResName);
            foundRes.UpdateClientCitizenship(foundResCitizenship);
            foundRes.UpdateStatus(foundResStatus);
        }
        catch (ArgumentException)
        {
            App.Current.MainPage.DisplayAlert("Update Error","Reservation data to be updated CANNOT be empty.","OK");
        }
    }
}
