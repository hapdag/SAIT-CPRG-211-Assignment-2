@page "/ReservationManager"
@using System
@using Assignment2.Data
<div class="d-flex justify-content-center">
    <h3>Reservation Finder</h3>
</div>
<label>Code:</label>
<input placeholder="Any" @bind="reservationCode" />
<label>Airline:</label>
<input placeholder="Any" @bind="reservationAirline" />
<label>Name:</label>
<input placeholder="Any" @bind="reservationName" />
<button class="btn-primary" @onclick="FindReservation">Find Reservations</button>
<br />
<div class="d-flex justify-content-center">
    <h3>Reservations</h3>
</div>
@foreach (var res in filteredReservs)
{
    <p> @res.ReservationCode @res.ReservedFlight.Airline @res.ClientName</p>
}

<br />
<div class="d-flex justify-content-center">
    <h3>Reserve</h3>
</div>
<div class="d-flex flex-column">
    <label>Reservation code:</label>
    <input placeholder="Reservation code" @bind="foundResCode" disabled/>
    <label>Flight code:</label>
    <input placeholder="Flight" @bind="foundResFlightCode" disabled/>
    <label>Airline:</label>
    <input placeholder="Airline" @bind="foundResAirline" disabled/>
    <label>Cost:</label>
    <input placeholder="Cost" @bind="foundResCost" disabled/>
    <label>Name:</label>
    <input placeholder="Name" @bind="foundResName"/>
    <label>Citizenship:</label>
    <input placeholder="Citizenship" @bind="foundResCitizenship"/>
    <label>Status:</label>
    <input placeholder="Status" @bind="foundResStatus"/>
</div>

@code {
    private string? reservationName, reservationAirline, reservationCode, foundResCode, foundResFlightCode,foundResAirline,foundResCost,foundResName,foundResCitizenship,foundResStatus;
    private List<Reservation> foundReservs = new List<Reservation>();
    private IEnumerable<Reservation> filteredReservs = new List<Reservation>();
    private Reservation? foundRes;

    private void FindReservation()
    {
        //        if(reservationCode != n<!ull & reservationAirline != null & reservationName != null)
        //        {
        //            var filteredReservs = FindFlightRes.reservations.Where(res => string.Equals(res.ReservationCode, reservationCode, StringComparison.OrdinalIgnoreCase) & string.Equals(res.ReservedFlight.Airline, reservationAirline, StringComparison.OrdinalIgnoreCase) & string.Equals(res.ClientName, reservationName, StringComparison.OrdinalIgnoreCase));
        //        }

        filteredReservs = FindFlightRes.reservations.Where(res => (!string.IsNullOrEmpty(reservationCode) ? string.Equals(res.ReservationCode, reservationCode.Trim(), StringComparison.OrdinalIgnoreCase) : true))
                                                    .Where(res => (!string.IsNullOrEmpty(reservationAirline) ? string.Equals(res.ReservedFlight.Airline, reservationAirline.Trim(), StringComparison.OrdinalIgnoreCase) : true))
                                                    .Where(res => (!string.IsNullOrEmpty(reservationName) ? string.Equals(res.ClientName, reservationName.Trim(), StringComparison.OrdinalIgnoreCase) : true));
                                                                    

    }
    private void SelectReserv(Reservation res)
    {
        
    }

}
